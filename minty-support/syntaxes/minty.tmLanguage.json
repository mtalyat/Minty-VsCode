{
    "scopeName": "source.minty",
    "name": "Minty",
    "patterns": [
        {
            "include": "#key"
        },
        {
            "include": "#value"
        },
        {
            "include": "#punctuation"
        },
        {
            "include": "#macro"
        },
        {
            "include": "#comment"
        }
    ],
    "repository": {
        "comment": {
            "patterns": [
                {
                    "match": "#.*$",
                    "name": "comment.line.minty"
                },
                {
                    "begin": "#-",
                    "end": "-#",
                    "name": "comment.block.minty"
                }
            ]
        },
        "macro": {
            "patterns": [
                {
                    "begin": "^\\s*#\\s*define\\s+([A-Z_][A-Z0-9_]*)\\s*(\\()?",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.function.preprocessor.minty"
                        },
                        "2": {
                            "name": "punctuation.definition.parameters.begin.minty"
                        }
                    },
                    "end": "$",
                    "patterns": [
                        {
                            "name": "variable.parameter.macro.minty",
                            "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                        },
                        {
                            "name": "punctuation.definition.parameters.end.minty",
                            "match": "\\)"
                        }
                    ],
                    "name": "keyword.control.directive.define.minty"
                },
                {
                    "name": "entity.name.function.preprocessor.call.minty",
                    "match": "\\b[A-Z_][A-Z0-9_]*\\s*(?=\\()"
                },
                {
                    "name": "constant.other.preprocessor.minty",
                    "match": "\\b[A-Z_][A-Z0-9_]*\\b"
                }
            ]
        },
        "key": {
            "patterns": [
                {
                    "match": "^\\w[\\w ]+",
                    "name": "support.element.0.minty"
                },
                {
                    "match": "^(?:\\t|\\s{4})\\w[\\w ]+",
                    "name": "storage.element.1.minty"
                },
                {
                    "match": "^(?:\\t|\\s{4}){2}\\w[\\w ]+",
                    "name": "entity.element.2.minty"
                },
                {
                    "match": "^(?:\\t|\\s{4}){3}\\w[\\w ]+",
                    "name": "variable.element.3.minty"
                },
                {
                    "match": "^(?:\\t|\\s{4}){4,}\\w[\\w ]+",
                    "name": "keyword.element.4.minty"
                }
            ]
        },
        "value": {
            "patterns": [
                {
                    "match": "\".*?\"",
                    "name": "string.quoted.double.minty"
                },
                {
                    "match": "\\b[a-fA-F0-9]{16}\\b",
                    "name": "constant.other.uuid.minty"
                },
                {
                    "match": "\\b0[bB][01]+\\b",
                    "name": "constant.numeric.binary.minty"
                },
                {
                    "match": "\\0[xX][0-9a-fA-F]+\\b",
                    "name": "constant.numeric.hexadecimal.minty"
                },
                {
                    "match": "\\b-?\\d*\\.?\\d+\\b",
                    "name": "constant.numeric.decimal.minty"
                },
                {
                    "match": "\\b-?\\d+\\b",
                    "name": "constant.numeric.integer.minty"
                },
                {
                    "match": "\\b([tT](?:rue)?|[fF](?:alse)|null|NULL)\\b",
                    "name": "constant.language.keyword.minty"
                },
                {
                    "match": "\\b(PI|BYTE|CHAR|U?SHORT|U?(INT|LONG)[234]?|(FLOAT|DOUBLE)[234]?|MATRIX[234]|QUATERNION|B|KB|MB|GB)\\b",
                    "name": "constant.language.constant.minty"
                },
                {
                    "match": "([\\w\\.\\-]+\/)+[\\w\\.\\-]*",
                    "name": "string.path.unquoted.minty"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "match": "[-,:]",
                    "name": "punctuation.separator.minty"
                }
            ]
        }
    }
}